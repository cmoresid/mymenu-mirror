import java.text.SimpleDateFormat

apply plugin: 'android'
apply plugin: 'android-apt'
apply plugin: 'checkstyle'
apply plugin: 'hugo'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
// bump for dogfood builds, public betas, etc.
def versionBuild = 0

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    disable 'InvalidPackage'
    abortOnError false
  }

  signingConfigs {
    release {
      storeFile file("keystore.jks")
      storePassword "123456"
      keyAlias "alias"
      keyPassword "123456"
    }
  }

  testBuildType "debug"

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
      runProguard false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
    beta.initWith(buildTypes.release)
    beta {
      versionNameSuffix "-beta"
      debuggable true
    }
    sourceSets.beta.setRoot('src/release') // same as release!
  }

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 19
    packageName "ca.mymenuapp"
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: '*.jar')
  compile 'com.android.support:support-v13:+'
  apt 'com.squareup.dagger:dagger-compiler:1.2.+'
  compile 'com.squareup.dagger:dagger:1.2.+'
  compile 'com.jakewharton:butterknife:4.0.+'
  compile 'com.f2prateek.dart:dart:1.0.+'
  compile 'com.f2prateek.ln:ln:1.1.+'
  compile 'com.squareup:otto:1.3.+'
  compile 'com.jakewharton.scalpel:scalpel:1.1.+'
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  // Checkstyle
  def name = variant.buildType.name
  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  // Exclude generated sources
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/*\$\$*.java') // Dagger, ButterKnife, Dart
  project.tasks.getByName("check").dependsOn checkstyle

  // Rename APK
  def apk = variant.packageApplication.outputFile;
  def newName = apk.name.replace(".apk",
      "-v${android.defaultConfig.versionName}-${versionBuild}.apk");
  newName = newName.replace("app", "${android.defaultConfig.packageName}");
  variant.packageApplication.outputFile = new File(apk.parentFile, newName);
  if (variant.zipAlign) {
    variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
  }
}

def gitSha() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}