buildscript {
  repositories {
    mavenCentral()
    maven { url "https://github.com/ben-manes/gradle-versions-plugin/raw/mvnrepo" }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.9.+'
    classpath 'com.jakewharton.hugo:hugo-plugin:1.0.1'
    classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.9.5'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1'
  }
}

apply plugin: 'android'
apply plugin: 'checkstyle'
apply plugin: 'hugo'
apply plugin: 'spoon'
apply plugin: 'versions'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
// bump for dogfood builds, public betas, etc.
def versionBuild = 0

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.2'

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'LICENSE.txt'
  }

  lintOptions {
    disable 'InvalidPackage'
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  signingConfigs {
    debug {
      storeFile file("debug.keystore")
    }
    release {
      storeFile file("release.keystore")
      storePassword "123456"
      keyAlias "alias"
      keyPassword "123456"
    }
  }

  testBuildType 'debug'

  buildTypes {
    debug {
      packageNameSuffix '.debug'
      versionNameSuffix '-debug'
    }
    release {
      signingConfig signingConfigs.release
      runProguard false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
    }
  }

  defaultConfig {
    minSdkVersion 16
    targetSdkVersion 19
    packageName 'ca.mymenuapp'
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    testInstrumentationRunner "ca.mymenuapp.MyMenuAppInstrumentationTestRunner"

    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
  }
}

dependencies {
  compile 'com.android.support:support-v13:19.0.+'
  compile 'com.android.support:support-v4:19.0.+'

  provided 'com.squareup.dagger:dagger-compiler:1.2.1'
  compile 'com.squareup.dagger:dagger:1.2.1'

  compile 'com.jakewharton:butterknife:4.0.1'
  compile 'com.f2prateek.dart:dart:1.1.0'

  compile 'com.f2prateek.ln:ln:1.1.1'

  compile 'com.squareup:otto:1.3.4'

  compile 'com.squareup.picasso:picasso:2.2.0'
  compile 'com.squareup.okhttp:okhttp:1.5.1'

  compile 'com.netflix.rxjava:rxjava-core:0.16.1'
  compile 'com.netflix.rxjava:rxjava-android:0.16.1'

  compile 'com.squareup.retrofit:retrofit:1.4.1'
  compile('com.squareup.retrofit:converter-simplexml:1.4.1') {
    // Inherent Simple XML dependency
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }

  compile('de.keyboardsurfer.android.widget:crouton:1.8.3') {
    exclude group: 'com.google.android', module: 'support-v4'
  }

  compile 'com.google.maps.android:android-maps-utils:0.3'
  compile 'com.google.android.gms:play-services:4.1.32'
  compile 'pl.charmas.android:android-reactive-location:0.1@aar'

  compile 'com.greenhalolabs:emailautocompletetextview:1.2.0'
  compile 'com.astuetz:pagerslidingtabstrip:1.0.1'

  debugCompile 'com.squareup.retrofit:retrofit-mock:1.4.1'
  debugCompile 'com.jakewharton.madge:madge:1.1.1'
  debugCompile 'com.jakewharton.scalpel:scalpel:1.1.1'

  androidTestCompile('com.jakewharton.espresso:espresso:1.1-r2') {
    exclude group: 'com.squareup.dagger'
  }
  androidTestCompile 'com.squareup:fest-android:1.0.7'
  androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1'
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  // Checkstyle
  def name = variant.buildType.name
  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  // Exclude generated sources
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/*\$\$*.java') // Dagger, ButterKnife, Dart
  checkstyle.exclude('**/ForegroundImageView.java') // space need after opening parenthesis?
  checkstyle.exclude('**/SlidingUpPanelLayout.java') // space need after opening parenthesis?
  project.tasks.getByName("check").dependsOn checkstyle

  // JavaDoc
  task("javadoc${name.capitalize()}", type: Javadoc) {
    source = variant.javaCompile.source
    ext.androidJar =
        "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
  }

  // Rename APK
  def apk = variant.packageApplication.outputFile;
  def newName = apk.name.replace(".apk",
      "-v${android.defaultConfig.versionName}-${versionBuild}.apk");
  newName = newName.replace("app", "${android.defaultConfig.packageName}");
  variant.packageApplication.outputFile = new File(apk.parentFile, newName);
  if (variant.zipAlign) {
    variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
  }
}
