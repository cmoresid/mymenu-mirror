/*
 * Copyright (C) 2014 MyMenu, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/].
 */

package ca.mymenuapp.data.api.model;

import android.app.Application;
import android.content.res.AssetManager;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import javax.inject.Inject;
import javax.inject.Singleton;

/**
 * Creates menu items with images from provided assets.
 *
 * Relies on {@link ca.mymenuapp.data.MockDownloader} to actually display the images
 * generated by this class.
 */
@Singleton
public final class MockDataLoader {
  private final AssetManager assetManager;

  @Inject MockDataLoader(Application application) {
    assetManager = application.getAssets();
  }

  /**
   * Create a new menu item with the given image.
   *
   * @param filename like {@code abc123.jpg} inside the {@code mock/images/} asset folder.
   */
  public MenuItem newMenuItem(String filename) {
    String path = "mock/images/" + filename;

    String id = filename.substring(0, filename.lastIndexOf('.'));
    String link = "mock:///" + path;

    MenuItem item = new MenuItem();
    item.id = path.hashCode();
    item.picture = path;
    return item;
  }

  /**
   * Return a mock path to the image with this filename.
   * Must be under assets/mock/images
   */
  private String picture(String filename) {
    return "mock:///mock/images/" + filename;
  }

  public List<Restaurant> newRestaurants() {
    List<Restaurant> restaurants = new ArrayList<>();
    AtomicLong nextId = new AtomicLong();

    restaurants.add(new RestaurantBuilder(nextId.getAndIncrement()) //
            .businessName("Boston Pizza (Whyte Ave)")
            .businessNumber("780-429-9999")
            .businessDescription(
                "A Sports Bar and a Restaurant, two great concepts under one roof!")
            .businessPicture(picture("boston_pizza.png"))
            .address("10854 82nd Avenue")
            .city("Edmonton")
            .locality("AB")
            .postalCode("T6E 2B3")
            .country("Canada")
            .lat(53.518415)
            .lng(-113.511446)
            .facebook("https://www.facebook.com/bpwhyteave")
            .twitter("https://twitter.com/bostonpizza")
            .website("http://t.co/HzkIcOBoQ2")
            .rating(6.7)
            .ratingCount("5")
            .category("Canadian")
            .priceLow("10")
            .distance("0.34")
            .priceHigh("30")
            .openTime("11:00:00")
            .closeTime("02:00:00")
            .get()
    );

    return restaurants;
  }

  public Map<String, User> newUsers() {
    Map<String, User> userMap = new LinkedHashMap<>();

    AtomicLong nextId = new AtomicLong();

    userMap.put("spiderman@avengers.com",
        new UserBuilder(nextId.getAndIncrement()).email("spiderman@avengers.com")
            .firstName("Peter")
            .lastName("Parker")
            .password("spiderman")
            .city("New York City")
            .country("USA")
            .gender('M')
            .birthday(1)
            .birthmonth(8)
            .birthyear(1962)
            .get()
    );

    userMap.put("captainamerica@avengers.com",
        new UserBuilder(nextId.getAndIncrement()).email("captainamerica@avengers.com")
            .firstName("Steve")
            .lastName("Rogers")
            .password("captainamerica")
            .city("Washington DC")
            .country("USA")
            .gender('M')
            .birthday(1)
            .birthmonth(3)
            .birthyear(1941)
            .get()
    );

    userMap.put("blackwidow@avengers.com",
        new UserBuilder(nextId.getAndIncrement()).email("blackwidow@avengers.com")
            .firstName("Natasha")
            .lastName("Romanova")
            .password("blackwidow")
            .city("Moscow")
            .country("Russia")
            .gender('F')
            .birthday(1)
            .birthmonth(4)
            .birthyear(1964)
            .get()
    );

    return userMap;
  }
}
